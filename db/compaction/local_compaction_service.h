// Copyright (c) 2019-present, Rockset, Inc.  All rights reserved.
// This source code is licensed under both the GPLv2 (found in the
// COPYING file in the root directory) and Apache 2.0 License
// (found in the LICENSE.Apache file in the root directory).

#pragma once

#include "rocksdb/compaction_service.h"

namespace ROCKSDB_NAMESPACE {
class Cache;
class ErrorHandler;
class EventLogger;
class FSDirectory;
class InstrumentedMutex;
class IOTracer;
class VersionSet;

struct FileOptions;
struct ImmutableDBOptions;

// The CompactionService performs the underlying compaction operations.
// Instances of this service take in a set of files to be compacted,
// perform the compaction, and return the results.
// The CompactionService is EXPERIMENTAL and subject to change in a future
// release
class LocalCompactionService : public CompactionService {
 public:
  const std::string& dbname_;
  const std::string& db_id_;
  const std::string& db_session_id_;
  const ImmutableDBOptions& db_options_;
  FileOptions* file_options_;
  const std::atomic<bool>* shutting_down_;
  const std::atomic<int>* manual_compaction_paused_;
  const std::atomic<SequenceNumber>* preserve_deletes_seqnum_;
  VersionSet* versions_;

  FSDirectory* db_directory_;
  InstrumentedMutex* db_mutex_;
  ErrorHandler* db_error_handler_;
  std::shared_ptr<Cache> table_cache_;
  EventLogger* event_logger_;
  std::shared_ptr<IOTracer> io_tracer_;
  Statistics* stats_;

 public:
  LocalCompactionService(
      const std::string& dbname, const std::string& db_id,
      const std::string& db_session_id, const ImmutableDBOptions& db_options,
      FileOptions* file_options_, const std::atomic<bool>* shutting_down,
      const std::atomic<int>* manual_compaction_paused,
      const std::atomic<SequenceNumber>* preserve_deletes_seqnum,
      VersionSet* versions, FSDirectory* db_directory,
      InstrumentedMutex* db_mutex, ErrorHandler* db_error_handler,
      const std::shared_ptr<Cache>& table_cache, EventLogger* event_logger,
      const std::shared_ptr<IOTracer>& io_tracer);

  // Returns the name of this compaction service.
  const char* Name() const override { return "LocalCompactionService"; }
  Status Start(const CompactionServiceOptions& compaction_options,
               std::string* job_id) override;

  Status Cancel(const std::string& job_id) override;

  Status WaitForComplete(const std::string& job_id,
                         CompactionJobInfo* compaction_job_info) override;

  // Install files that were generated by a pluggable compaction request into
  // the local database.
  std::vector<Status> DownloadFiles(
      const FileOptions& options, const std::vector<std::string>& remote_path,
      const std::vector<std::string>& local_path) override;
};

class SubCompactionService : public CompactionService {
 public:
  SubCompactionService();
  // Returns the name of this compaction service.
  const char* Name() const override { return "LocalSubCompactionService"; }
  Status Start(const CompactionServiceOptions& compaction_options,
               std::string* job_id) override;

  Status Cancel(const std::string& job_id) override;

  Status WaitForComplete(const std::string& job_id,
                         CompactionJobInfo* compaction_job_info) override;

  // Install files that were generated by a pluggable compaction request into
  // the local database.
  std::vector<Status> DownloadFiles(
      const FileOptions& options, const std::vector<std::string>& remote_path,
      const std::vector<std::string>& local_path) override;
};
}  // namespace ROCKSDB_NAMESPACE
